#lang racket

(define-struct single-cmd (unit-cmd))
(define-struct multi-cmd (cmd unit-cmd))
(define-struct while-unitCmd (exp cmd))
(define-struct if-unitCmd (exp cmd1 cmd2))
(define-struct assign-unitCmd (var exp))
(define-struct assign-func (var vars cmd))
(define-struct function (vars cmd saved-env))
(define-struct assign-call (var1 var2 args))
(define-struct single-var (var))
(define-struct multi-var (var vars))
(define-struct single-arg (exp))
(define-struct multi-arg (exp args))
(define-struct return-unitCmd (exp))
(define-struct greater-exp (exp1 exp2))
(define-struct less-exp (exp1 exp2))
(define-struct equal-exp (exp1 exp2))
(define-struct unequal-exp (exp1 exp2))
(define-struct subtract-exp (exp1 exp2))
(define-struct plus-exp (exp1 exp2))
(define-struct mult-exp (exp1 exp2))
(define-struct div-exp (exp1 exp2))
(define-struct minus-exp (exp))
(define-struct par-exp (exp))
(define-struct posNum-exp (num))
(define-struct var-exp (var))
(define-struct bool-exp (bool-arg))
(define-struct string-exp (str))
(define-struct mt-list-exp ())
(define-struct null-exp ())
(define-struct list-exp (lVal))
(define-struct varList-exp (var lMem))
(define-struct single-lVal (exp))
(define-struct multi-lVal (exp lVal))
(define-struct single-lMem (exp))
(define-struct multi-lMem (exp lMem))

(provide (all-defined-out))